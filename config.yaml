# Configuration for Python Codebase C4 Evaluator

# LLM Configuration
llm:
  model: "gpt-4"  # Options: gpt-3.5-turbo, gpt-4, gpt-4-turbo-preview
  temperature: 0.1
  max_tokens: 1000

# Structurizr Configuration
structurizr:
  # Get these from https://structurizr.com/help/web-api
  api_key: "5b74376d-c9ff-49ad-acb4-a73f900e9b7c"  # Your API key
  api_secret: "ea9f2108-8c46-4ee3-a05e-fee59da6e97f"  # Your API secret
  workspace_id: 105540  # Your workspace ID (integer)

  # Visualization settings
  auto_open_browser: true
  default_view: "diagrams"  # diagrams, explore, documentation
  
  # Export settings
  export_format: "png"  # png, svg, plantuml, mermaid

# Complexity Thresholds
complexity:
  simple:
    max_files: 50
    max_lines: 5000
    description: "Single service, clear structure, standard patterns"
  moderate:
    max_files: 150
    max_lines: 20000
    description: "Few services, standard frameworks, mostly clear boundaries"
  complex:
    description: "Multiple services, many integrations, unclear boundaries"

# Analysis Settings
analysis:
  # Directories to skip during analysis
  skip_directories:
    - "venv"
    - ".venv"
    - "__pycache__"
    - "node_modules"
    - ".git"
    - "dist"
    - "build"
    - ".pytest_cache"
    - ".tox"
    - "htmlcov"
    - ".coverage"
  
  # File patterns to identify as entry points
  entry_point_patterns:
    - "main.py"
    - "app.py"
    - "__main__.py"
    - "run.py"
    - "manage.py"
    - "wsgi.py"
    - "asgi.py"
    - "cli.py"
    - "server.py"
  
  # Priority files for code sampling
  sample_priority_files:
    - "main.py"
    - "app.py"
    - "models.py"
    - "views.py"
    - "routes.py"
    - "schemas.py"
    - "services.py"
    - "handlers.py"
  
  # Maximum lines to preview from each file
  max_preview_lines: 50
  
  # Maximum number of code samples to extract
  max_code_samples: 3

# Framework Detection
frameworks:
  # Mapping of package names to framework names
  web:
    flask: "Flask"
    django: "Django"
    fastapi: "FastAPI"
    starlette: "Starlette"
    tornado: "Tornado"
    aiohttp: "aiohttp"
    pyramid: "Pyramid"
    bottle: "Bottle"
    sanic: "Sanic"
  
  data_science:
    pandas: "Pandas"
    numpy: "NumPy"
    scikit-learn: "Scikit-learn"
    tensorflow: "TensorFlow"
    torch: "PyTorch"
    keras: "Keras"
  
  database:
    sqlalchemy: "SQLAlchemy"
    pymongo: "MongoDB"
    redis: "Redis"
    psycopg2: "PostgreSQL"
    mysql: "MySQL"
  
  testing:
    pytest: "pytest"
    unittest: "unittest"
    nose: "nose"
    mock: "mock"
  
  async:
    asyncio: "asyncio"
    celery: "Celery"
    dramatiq: "Dramatiq"
    rq: "RQ"
  
  api:
    pydantic: "Pydantic"
    marshmallow: "Marshmallow"
    rest_framework: "Django REST"
    graphene: "GraphQL"

# Output Settings
output:
  # Show verbose output
  verbose: true
  
  # Save results to JSON file
  save_json: false
  json_filename: "evaluation_results.json"
  
  # Summary format
  show_emoji: true
  show_reasoning: true
  show_confidence: true

# Prompts
prompts:
  system_message: |
    You are an expert architect evaluating if a Python codebase 
    is simple enough for AI-generated C4 diagrams.
    
    Consider:
    - Simple: < {simple_max_files} files, clear structure, single service
    - Moderate: {simple_max_files}-{moderate_max_files} files, few services, standard patterns  
    - Complex: > {moderate_max_files} files, microservices, unclear boundaries
    
    Respond with JSON:
    {{
        "complexity_level": "simple|moderate|complex",
        "complexity_score": 0-10,
        "can_use_llm": true|false,
        "reasoning": "explanation",
        "confidence": 0-1
    }}
  
  evaluation_template: |
    Python Codebase Analysis:
    
    Metrics:
    - Files: {files}
    - Lines: {lines}
    - Classes: {classes}
    - Functions: {functions}
    - Frameworks: {frameworks}
    
    Structure:
    - Has tests: {has_tests}
    - Entry points: {entry_points}
    - Packages: {packages} packages found
    
    Code Sample from {sample_file}:
    ```python
    {code_preview}
    ```
    
    Question: Can an LLM effectively generate C4 diagrams for this codebase?

  create_dsl_prompt: |
    You are an expert software architect who creates C4 architecture diagrams.
    You will be given the COMPLETE source code of a Python application.
    Analyse the code and generate a comprehensive Structurizr DSL file that accurately models the application architecture.

    **IMPORTANT STRUCTURIZR DSL RULES:**
    - Do NOT use variable assignments for containers or components (e.g., do NOT write `foo = container ...`).
    - Define all containers INSIDE their parent softwareSystem block.
    - Define all components INSIDE their parent container block.
    - Define relationships between components INSIDE the container block.
    - Do NOT reference components or containers at the top level.
    - Only use valid Structurizr DSL syntax.

    **EXAMPLE:**

    workspace {
        model {
            user = person "User"
            mainSystem = softwareSystem "<Main System Name>" {
                # Define containers found in the codebase
                containerA = container "<Container A Name>" {
                    # Define components found in this container
                    componentA = component "<Component A Name>" {
                        description "<What this component does>"
                    }
                    componentB = component "<Component B Name>" {
                        description "<What this component does>"
                    }
                    # Relationships between components (use identifiers)
                    componentA -> componentB "<Relationship description>"
                }
                containerB = container "<Container B Name>" {
                    # ...more components...
                }
                # Relationships between containers (use identifiers)
                containerA -> containerB "<Relationship description>"
            }
            # Define external systems/services if found
            externalSystem = softwareSystem "<External System Name>"
            database = softwareSystem "<Database Name>"
            # Relationships from user and containers to systems/services
            user -> mainSystem "<How user interacts>"
            containerA -> externalSystem "<Relationship description>"
            containerA -> database "<Relationship description>"
        }
        views {
            systemContext mainSystem {
                include *
                autoLayout
            }
            container mainSystem {
                include *
                autoLayout
            }
            # For each container, add a component view
            component containerA {
                include *
                autoLayout
            }
            styles {
                element "Software System" {
                    background #1168bd
                    color #ffffff
                }
                element "Container" {
                    background #438dd5
                    color #ffffff
                }
                element "Component" {
                    background #85bbf0
                    color #000000
                }
                element "Person" {
                    shape person
                    background #08427b
                    color #ffffff
                }
                element "Database" {
                    shape cylinder
                }
                element "External System" {
                    background #999999
                    color #ffffff
                }
            }
        }
    }

    Base your architecture ENTIRELY on the actual code provided, not on assumptions.
    Generate ONLY the Structurizr DSL code, starting with 'workspace' and ending with the closing brace.
    Make sure the DSL is complete, valid, and ready to use.

  codebase_message: |
    Based on the complete codebase above, generate a Structurizr DSL that:
    1. Accurately represents the architecture found in the code
    2. Includes all major components and their relationships
    3. Uses meaningful names from the actual code
    4. Creates clear System Context, Container, and Component views
    5. Is syntactically correct and complete

    Generate the Structurizr DSL:

  styles: |
    styles {
        element "Software System" {
            background #1168bd
            color #ffffff
        }
        element "Container" {
            background #438dd5
            color #ffffff
        }
        element "Component" {
            background #85bbf0
            color #000000
        }
        element "Person" {
            shape person
            background #08427b
            color #ffffff
        }
        element "Database" {
            shape cylinder
        }
        element "External System" {
            background #999999
            color #ffffff
        }